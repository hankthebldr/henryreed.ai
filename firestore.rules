rules_version = '2';

// Firestore Security Rules for Cortex DC Portal
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions for authentication and authorization
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isAuthorizedUser() {
      return isAuthenticated() && 
             (request.auth.token.email.matches('.*@henryreed.ai') ||
              request.auth.token.email.matches('.*@paloaltonetworks.com') ||
              hasRole('admin') || hasRole('manager'));
    }
    
    function hasRole(role) {
      return isAuthenticated() && 
             ('roles' in request.auth.token) &&
             (role in request.auth.token.roles) &&
             request.auth.token.roles[role] == true;
    }
    
    function isValidEmail() {
      return request.auth.token.email.matches('.*@henryreed.ai') ||
             request.auth.token.email.matches('.*@paloaltonetworks.com');
    }
    
    // Users collection - profile data
    match /users/{userId} {
      allow read: if isAuthenticated() && (isOwner(userId) || hasRole('admin'));
      allow create: if isAuthenticated() && isOwner(userId) && isValidEmail();
      allow update: if isAuthenticated() && isOwner(userId);
      allow delete: if hasRole('admin');
    }
    
    // TRR (Technical Requirements Review) documents
    match /trr/{trrId} {
      allow read: if isAuthenticated();
      allow create, update: if isAuthorizedUser();
      allow delete: if hasRole('admin') || hasRole('manager');

      // TRR sub-collections (comments, attachments, etc.)
      match /{subCollection}/{docId} {
        allow read: if isAuthenticated();
        allow write: if isAuthorizedUser();
      }
    }

    // Training records collection
    match /training/{trainingId} {
      allow read: if isAuthenticated();
      allow create, update: if isAuthorizedUser();
      allow delete: if hasRole('admin') || hasRole('manager');
    }

    // Knowledge base collection
    match /knowledgebase/{kbId} {
      allow read: if isAuthenticated();
      allow create, update: if isAuthorizedUser();
      allow delete: if hasRole('admin') || hasRole('manager');
    }
    
    // POV (Proof of Value) documents
    match /pov/{povId} {
      allow read: if isAuthenticated();
      allow create, update: if isAuthorizedUser();
      allow delete: if hasRole('admin') || hasRole('manager');
      
      match /{subCollection}/{docId} {
        allow read: if isAuthenticated();
        allow write: if isAuthorizedUser();
      }
    }
    
    // Scenarios collection
    match /scenarios/{scenarioId} {
      allow read: if isAuthenticated();
      allow create, update: if isAuthorizedUser();
      allow delete: if hasRole('admin');
    }
    
    // Templates collection
    match /templates/{templateId} {
      allow read: if isAuthenticated();
      allow create, update, delete: if hasRole('admin') || hasRole('manager');
    }
    
    // Activity logs (read-only for users, write for system)
    match /activity/{activityId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated(); // System writes only
      allow update, delete: if hasRole('admin');
    }

    // ============================================================================
    // User Timeline & Event System (append-only, immutable events)
    // ============================================================================

    // Per-user event timeline: owner readable, append-only, immutable
    match /users/{uid}/events/{eventId} {
      allow read: if isOwner(uid) || hasRole('admin');
      // Only Cloud Functions can create events (via service account)
      // Client-side creation blocked to maintain audit integrity
      allow create: if false;
      allow update, delete: if false; // Events are immutable
    }

    // Per-user aggregated stats (derived from events)
    match /users/{uid}/stats {
      allow read: if isOwner(uid) || hasRole('admin');
      allow write: if false; // Only Cloud Functions write stats
    }

    // Global analytics readable by admins, writable by Functions
    match /analytics/{doc=**} {
      allow read: if hasRole('admin') || hasRole('manager');
      allow write: if false; // Only Cloud Functions write analytics
    }

    // ============================================================================
    // Configuration, Notifications, and System Collections
    // ============================================================================

    // Configuration and settings
    match /config/{configId} {
      allow read: if isAuthenticated();
      allow write: if hasRole('admin');
    }

    // Notifications
    match /notifications/{userId}/{notificationId} {
      allow read, write: if isOwner(userId);
      allow create: if isAuthenticated(); // System can create notifications for any user
    }

    // User sessions and preferences
    match /sessions/{userId} {
      allow read, write: if isOwner(userId);
    }

    // Audit logs (admin only, immutable)
    match /audit/{auditId} {
      allow read: if hasRole('admin');
      allow create: if isAuthenticated(); // System writes audit logs
      allow update, delete: if false; // Audit logs are immutable
    }
    
    // Company/organization data
    match /organizations/{orgId} {
      allow read: if isAuthenticated();
      allow write: if hasRole('admin');
    }
    
    // Feature flags and remote config
    match /features/{featureId} {
      allow read: if isAuthenticated();
      allow write: if hasRole('admin');
    }
    
    // Default deny rule for any unlisted collections
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
