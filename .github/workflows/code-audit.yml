name: Code Audit - UI/TS Standards

on:
  pull_request:
    branches: [ master, main ]
    paths:
      - 'hosting/components/**'
      - 'hosting/app/**'
      - 'hosting/lib/**'
      - 'hosting/contexts/**'
      - 'hosting/hooks/**'

jobs:
  audit:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: hosting/package-lock.json

      - name: Install dependencies
        working-directory: hosting
        run: npm ci

      - name: Run TypeScript compilation check
        working-directory: hosting
        run: npm run type-check

      - name: Run ESLint
        working-directory: hosting
        run: npm run lint

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v41
        with:
          files: |
            hosting/components/**/*.{ts,tsx}
            hosting/app/**/*.{ts,tsx}
            hosting/lib/**/*.{ts,tsx}
            hosting/contexts/**/*.{ts,tsx}
            hosting/hooks/**/*.{ts,tsx}

      - name: Run UI/TS Audit on changed files
        if: steps.changed-files.outputs.any_changed == 'true'
        env:
          CHANGED_FILES: ${{ steps.changed-files.outputs.all_changed_files }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          cd hosting
          node ../scripts/audit-runner.js

      - name: Comment PR with audit results
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const auditResults = fs.existsSync('hosting/audit-results.json')
              ? JSON.parse(fs.readFileSync('hosting/audit-results.json', 'utf8'))
              : { status: 'error', message: 'Audit did not complete' };

            const status = auditResults.status === 'pass' ? '✅' : '⚠️';
            const comment = `## ${status} Code Audit Results

**Status**: ${auditResults.status}
**Files Audited**: ${auditResults.filesAudited || 0}

### Summary
${auditResults.summary || 'No summary available'}

### Issues Found
${auditResults.issues?.length > 0
  ? auditResults.issues.map(i => `- **${i.severity}**: ${i.message} (${i.file}:${i.line})`).join('\n')
  : '_No issues found_'}

### Recommendations
${auditResults.recommendations?.length > 0
  ? auditResults.recommendations.map(r => `- ${r}`).join('\n')
  : '_No recommendations_'}

---
_Audit enforces: Type safety, React best practices, accessibility, error handling, naming conventions_
`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
